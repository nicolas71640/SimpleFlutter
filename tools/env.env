#!/bin/bash

#Source it in your .zshrc file


export PUB_CACHE="$FLUTTER_WORKSPACE_DIRECTORY/frontend/.pub-cache"
export FLUTTER_FRONTEND_WORKSPACE_DIRECTORY="$FLUTTER_WORKSPACE_DIRECTORY/frontend"
export FLUTTER_BACKEND_WORKSPACE_DIRECTORY="$FLUTTER_WORKSPACE_DIRECTORY/backend"
export CREDENTIALS_FOLDER="$FLUTTER_WORKSPACE_DIRECTORY/credentials"


alias ft="cd $FLUTTER_WORKSPACE_DIRECTORY"
alias ftf="cd $FLUTTER_FRONTEND_WORKSPACE_DIRECTORY"
alias ftb="cd FLUTTER_BACKEND_WORKSPACE_DIRECTORY"

buildServer()
{ 
    docker build -t custom_node -f $FLUTTER_BACKEND_WORKSPACE_DIRECTORY/tools/docker/node .
}

runServer() {
    docker compose --profile development --env-file $FLUTTER_WORKSPACE_DIRECTORY/tools/docker/compose_dev.env -f $FLUTTER_WORKSPACE_DIRECTORY/tools/docker/docker-compose.yml up    
}

importFakeCottages() {
    mongoimport --jsonArray --db myapp --collection cottages --file $FLUTTER_FRONTEND_WORKSPACE_DIRECTORY/assets/cottages.json
}

cleanDb() {
    mongo myapp --eval "db.dropDatabase()"
}

#Check if analyze and format command returns ok
checkPaulette() {
    dart format --set-exit-if-changed $FLUTTER_FRONTEND_WORKSPACE_DIRECTORY &&
        flutter analyze $FLUTTER_FRONTEND_WORKSPACE_DIRECTORY 
}

installPaulette() {
    session=$(bw unlock --raw)

    bw sync --session $session

    #Get Android sign key from bitwarden, format it, and then import it in debug.keystore thanks to gpg
    #Check this tutorial to see why we do that : https://stefma.medium.com/how-to-store-a-android-keystore-safely-on-github-actions-f0cef9413784
    android_signkey=$(bw get password ANDROID_SIGNKEY --session $session)
    android_signkey="-----BEGIN PGP MESSAGE-----\n\n"${android_signkey// /$'\n'}"-----END PGP MESSAGE-----" &&
        rm -f /tmp/android_signkey.asc &&
        echo -e $android_signkey >>/tmp/android_signkey.asc


    gpg -d --passphrase arandompassphrase --batch /tmp/android_signkey.asc  > ~/.android/debug.keystore
    rm -f /tmp/android_signkey.asc
}

createTablet() {
        name="Tablet"
        echo -ne "n\n" | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd -n $name -k "system-images;android-33;google_apis;x86_64" --force
        bash -c "echo "hw.lcd.density=213" >> $HOME/.android/avd/$name.avd/config.ini"
        bash -c "echo "hw.lcd.height=1280" >> $HOME/.android/avd/$name.avd/config.ini"
        bash -c "echo "hw.lcd.width=800" >> $HOME/.android/avd/$name.avd/config.ini"
        bash -c "echo "hw.mainKeys=no" >> $HOME/.android/avd/$name.avd/config.ini"
}


startEmulator() {
    set -e

    if [ "`adb shell getprop sys.boot_completed | tr -d '\r' `" != "1" ]; then

       $ANDROID_HOME/emulator/emulator -avd $1 -gpu off -no-audio -dns-server 8.8.8.8 -skin 800x1280 $2 &

       #Wait for the emulator to boot
       echo "Waiting For the emulator to be online"
       while [ "`adb shell getprop sys.boot_completed | tr -d '\r' `" != "1" ] ; do sleep 1; done
    fi;
}

startChrome()
{
    # OS must use wayland (and not X11)
    google-chrome --enable-features=UseOzonePlatform --ozone-platform=wayland
}


flutterRunChrome()
{
    flutter run -d chrome   --web-browser-flag --enable-features=UseOzonePlatform \
                            --web-browser-flag --ozone-platform=wayland \
                            --web-browser-flag --disable-dev-shm-usage \
                            --web-browser-flag --no-sandbox
}
